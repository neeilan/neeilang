The NeeiLang Programming Language
=================================

NeeiLang (NL) is a lightweight programming language that is under 
construction. It is designed to be:

*  Performant : emits native code with a minimal runtime system
*  Type-safe  : via aggressive type-checking and semantic analyses
*  Effortless : GC, minimal C-like syntax, ~15 keywords

Implementation Progress:

+-----------------------------+
| Feature            | Status |
+--------------------+--------+
| Local variables    |   OK   |
| Control flow       |   OK   |
| Functions          |   OK   |
| Type checker       |   OK   |
| Inheritance        |   OK   |
| Virtual methods    |   OK   |
| Type inference     |   OK   |
| Arrays             |   OK   |
| Print              |   OK   |
| Short-circuiting   |        |
| Static variables   |        |
| Garbage collection |        |
| Modules            |        |
| Runtime errors     |        |
| POSIX bindings     |        |
| Standard library   |        |
+--------------------+--------+

Usage      : www.github.com/neeilan/neeilang/tree/master/doc/Usage
Language   : www.github.com/neeilan/neeilang/tree/master/doc/Lang.md
Impl notes : www.github.com/neeilan/neeilang/tree/master/doc/Impl

Note that this project is intended to be an academic exercise and 
not a production-grade language toolchain.

Building - LLVM backend
-----------------------
The LLVM backend is programmed against LLVM 9.0.0 API. Since common
package manger repositories only offer newer versions, you'll need to
build from source:
* Download the LLVM 9.0.0 source code from https://releases.llvm.org/
* Extract and build locally (it's a CMake project, so `cmake .` + `make`)
* In the neeilang dir, run cmake while setting the LLVM_PATH variable.
  For me, this looks like `cmake -DLLVM_PATH=~/personal/llvm9 .`, then `make`.
* Examples under `test/functional` are ok to play with. `nl_compile_and_run.sh`
  will have neeilang emit the LLVM IR and execute using lli, like so:
  ```
  $ ./nl_compile_and_run.sh test/functional/funcs_with_args.nl.splat
  hi
  hi
  hi
  ```

Building - x86-64 backend
-------------------------
* Run `cmake -DTARGET_X86=ON .`, then `make`